using System.Collections.Generic;

using Bob;

public class Build : IBob
{
    private ITask Clean()
    {
        return FileSystem.Delete(parameters =>
        {
            parameters.Directories = FileSystem.Directories.Match("build");
        });
    }

    private ITask Restore()
    {
        return NuGet.Restore(parameters =>
        {
            parameters.Path = NuGet.Path.Online(settings =>
            {
                settings.Cache = NuGet.Cache.AppData();
            });
        });
    }

    private IEnumerable<ITask> Compile()
    {
        yield return MsBuild.Compile(parameters =>
        {
            parameters.Output = FileSystem.Directories.Relative("build\\output");
            parameters.Properties.Add(MsBuild.Properties.Configuration.Release());
        });
    }

    private IEnumerable<ITask> Test()
    {
        yield return NuGet.Install(parameters =>
        {
            parameters.Package = NuGet.Repository.Get("NUnit.Runners");
            parameters.Path = NuGet.Path.Online(settings =>
            {
                settings.Cache = NuGet.Cache.AppData();
            });
        });

        yield return NUnit.Execute(parameters =>
        {
            parameters.Assemblies = FileSystem.Files.Match("build\\output\\JsonIndex.*.dll");
            parameters.XmlResult = FileSystem.Files.Relative("build\\nunit.xml");
        });
    }

    private IEnumerable<ITask> Pack()
    {
        yield return FileSystem.NewDirectory(parameters =>
        {
            parameters.Path = FileSystem.Directories.Relative("build\\package");
        });

        yield return NuGet.Pack(parameters =>
        {
            parameters.Output = FileSystem.Directories.Match("build\\package");
            parameters.Path = NuGet.Path.Online(settings =>
            {
                settings.Cache = NuGet.Cache.AppData();
            });
            parameters.Specification = NuGet.Specification.Inline(package =>
            {
                package.Id = "json-index";
                package.Version = "0.1.2";
                package.Authors = "Adrian Macal";
                package.Description = "JSON indexing library.";
                package.Files["lib\\net45"] = FileSystem.Files.Match("build\\output\\JsonIndex.dll");
            });
        });
    }

    private IEnumerable<ITask> Default()
    {
        yield break;
    }

    public void Execute(IPipeline pipeline)
    {
        pipeline.Default(Default);
        pipeline.Define(Clean, Restore, Compile, Test, Default, Pack);
    }
}